[
  {
    "id": "prob_1",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>The array contains between 2 and 10^4 elements</li>\n  <li>Each element is between -10^9 and 10^9</li>\n  <li>There is exactly one solution</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "The array contains between 2 and 10^4 elements\nEach element is between -10^9 and 10^9\nThere is exactly one solution",
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(n)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n    // Your solution here\n    \n}\n\n// Do not modify the code below\nmodule.exports = twoSum;\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\n# Definition\ndef two_sum(nums, target):\n    # Your solution here\n    \n    \n# Do not modify the code below\nif __name__ == \"__main__\":\n    # Example test case\n    print(two_sum([2,7,11,15], 9))\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\nimport java.util.*;\n\nclass Solution {\n    // Do not modify the class name\n    public int[] twoSum(int[] nums, int target) {\n        // Your solution here\n        \n    }\n    \n    // Do not modify the main method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] result = solution.twoSum(new int[]{2,7,11,15}, 9);\n        System.out.println(Arrays.toString(result));\n    }\n}\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n#include <vector>\n#include <iostream>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        // Your solution here\n        \n    }\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    std::vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    std::vector<int> result = solution.twoSum(nums, target);\n    std::cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << std::endl;\n    return 0;\n}\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9"
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6"
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6"
      }
    ],
    "testCases": [
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": false
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6",
        "isHidden": false
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6",
        "isHidden": false
      },
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": true
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6",
        "isHidden": true
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6",
        "isHidden": true
      },
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": true
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6",
        "isHidden": true
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6",
        "isHidden": true
      },
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_2",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxSubArray(nums) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_sub_array(nums):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum."
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "testCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": false
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": false
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_3",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxArea(height) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_area(height):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49."
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1."
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16."
      }
    ],
    "testCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": false
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": false
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": false
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_4",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1) where n is the length of the strings</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1) where n is the length of the strings",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction isAnagram(s, t) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef is_anagram(s, t):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\"."
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters."
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\"."
      }
    ],
    "testCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": false
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": false
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": false
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_5",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction lengthOfLongestSubstring(s) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef length_of_longest_substring(s):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3."
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1."
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3."
      }
    ],
    "testCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": false
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_6",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction reverseList(head) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef reverse_list(head):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1."
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": false
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": false
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_7",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_8",
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxDepth(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_depth(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7)."
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2)."
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": false
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_9",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(n) where n is the number of nodes</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(n) where n is the number of nodes",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction levelOrder(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef level_order(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7]."
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_10",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_11",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction climbStairs(n) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef climb_stairs(n):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps."
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2."
      }
    ],
    "testCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": false
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": false
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": false
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_12",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction coinChange(coins, amount) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef coin_change(coins, amount):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins."
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins."
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": false
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": false
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": false
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_13",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_14",
    "title": "Maximum Average Subarray I",
    "description": "You are given an integer array nums consisting of n elements, and an integer k. Find a contiguous subarray of length k that has the maximum average value and return this value.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75."
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0."
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0."
      }
    ],
    "testCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": false
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": false
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": false
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      }
    ],
    "tags": [
      "Sliding Window"
    ],
    "categories": [
      "Sliding Window"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_15",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_16",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_17",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_18",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction reverseList(head) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef reverse_list(head):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1."
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": false
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": false
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_19",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_20",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_21",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_22",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction climbStairs(n) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef climb_stairs(n):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps."
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2."
      }
    ],
    "testCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": false
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": false
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": false
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_23",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_24",
    "title": "Maximum Average Subarray I",
    "description": "You are given an integer array nums consisting of n elements, and an integer k. Find a contiguous subarray of length k that has the maximum average value and return this value.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75."
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0."
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0."
      }
    ],
    "testCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": false
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": false
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": false
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      }
    ],
    "tags": [
      "Sliding Window"
    ],
    "categories": [
      "Sliding Window"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_25",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(n) where n is the number of nodes</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(n) where n is the number of nodes",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction levelOrder(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef level_order(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7]."
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_26",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction lengthOfLongestSubstring(s) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef length_of_longest_substring(s):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3."
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1."
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3."
      }
    ],
    "testCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": false
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_27",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_28",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_29",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction climbStairs(n) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef climb_stairs(n):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps."
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2."
      }
    ],
    "testCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": false
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": false
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": false
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_30",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction reverseList(head) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef reverse_list(head):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1."
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": false
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": false
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_31",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_32",
    "title": "Maximum Average Subarray I",
    "description": "You are given an integer array nums consisting of n elements, and an integer k. Find a contiguous subarray of length k that has the maximum average value and return this value.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75."
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0."
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0."
      }
    ],
    "testCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": false
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": false
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": false
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      }
    ],
    "tags": [
      "Sliding Window"
    ],
    "categories": [
      "Sliding Window"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_33",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxArea(height) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_area(height):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49."
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1."
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16."
      }
    ],
    "testCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": false
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": false
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": false
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_34",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(n) where n is the number of nodes</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(n) where n is the number of nodes",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction levelOrder(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef level_order(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7]."
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_35",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_36",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxSubArray(nums) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_sub_array(nums):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum."
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "testCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": false
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": false
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_37",
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxDepth(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_depth(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7)."
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2)."
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": false
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_38",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_39",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1) where n is the length of the strings</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1) where n is the length of the strings",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction isAnagram(s, t) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef is_anagram(s, t):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\"."
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters."
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\"."
      }
    ],
    "testCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": false
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": false
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": false
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_40",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxSubArray(nums) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_sub_array(nums):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum."
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "testCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": false
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": false
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_41",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_42",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_43",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(n) where n is the number of nodes</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(n) where n is the number of nodes",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction levelOrder(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef level_order(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7]."
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_44",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction climbStairs(n) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef climb_stairs(n):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps."
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2."
      }
    ],
    "testCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": false
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": false
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": false
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_45",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction climbStairs(n) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef climb_stairs(n):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps."
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2."
      }
    ],
    "testCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": false
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": false
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": false
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_46",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_47",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_48",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(n) where n is the number of nodes</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(n) where n is the number of nodes",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction levelOrder(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef level_order(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7]."
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_49",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_50",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction lengthOfLongestSubstring(s) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef length_of_longest_substring(s):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3."
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1."
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3."
      }
    ],
    "testCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": false
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_51",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_52",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1) where n is the length of the strings</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1) where n is the length of the strings",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction isAnagram(s, t) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef is_anagram(s, t):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\"."
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters."
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\"."
      }
    ],
    "testCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": false
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": false
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": false
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_53",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction climbStairs(n) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef climb_stairs(n):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps."
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2."
      }
    ],
    "testCases": [
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": false
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": false
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": false
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      },
      {
        "input": "3",
        "expectedOutput": "3",
        "explanation": "There are three ways: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.",
        "isHidden": true
      },
      {
        "input": "4",
        "expectedOutput": "5",
        "explanation": "There are five ways: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, or 2+2.",
        "isHidden": true
      },
      {
        "input": "2",
        "expectedOutput": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step, or 2 steps.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_54",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_55",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction coinChange(coins, amount) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef coin_change(coins, amount):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins."
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins."
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": false
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": false
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": false
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_56",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1) where n is the length of the strings</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1) where n is the length of the strings",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction isAnagram(s, t) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef is_anagram(s, t):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\"."
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters."
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\"."
      }
    ],
    "testCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": false
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": false
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": false
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_57",
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxDepth(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_depth(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7)."
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2)."
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": false
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_58",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction reverseList(head) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef reverse_list(head):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1."
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": false
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": false
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_59",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_60",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_61",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_62",
    "title": "Maximum Average Subarray I",
    "description": "You are given an integer array nums consisting of n elements, and an integer k. Find a contiguous subarray of length k that has the maximum average value and return this value.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75."
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0."
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0."
      }
    ],
    "testCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": false
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": false
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": false
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      }
    ],
    "tags": [
      "Sliding Window"
    ],
    "categories": [
      "Sliding Window"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_63",
    "title": "Maximum Average Subarray I",
    "description": "You are given an integer array nums consisting of n elements, and an integer k. Find a contiguous subarray of length k that has the maximum average value and return this value.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75."
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0."
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0."
      }
    ],
    "testCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": false
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": false
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": false
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      }
    ],
    "tags": [
      "Sliding Window"
    ],
    "categories": [
      "Sliding Window"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_64",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxSubArray(nums) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_sub_array(nums):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum."
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "testCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": false
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": false
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_65",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_66",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_67",
    "title": "Maximum Average Subarray I",
    "description": "You are given an integer array nums consisting of n elements, and an integer k. Find a contiguous subarray of length k that has the maximum average value and return this value.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75."
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0."
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0."
      }
    ],
    "testCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": false
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": false
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": false
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      }
    ],
    "tags": [
      "Sliding Window"
    ],
    "categories": [
      "Sliding Window"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_68",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1) where n is the length of the strings</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1) where n is the length of the strings",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction isAnagram(s, t) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef is_anagram(s, t):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\"."
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters."
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\"."
      }
    ],
    "testCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": false
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": false
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": false
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_69",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_70",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(n) where n is the number of nodes</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(n) where n is the number of nodes",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction levelOrder(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef level_order(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7]."
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_71",
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxDepth(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_depth(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7)."
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2)."
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": false
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_72",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction coinChange(coins, amount) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef coin_change(coins, amount):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins."
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins."
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": false
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": false
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": false
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_73",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxArea(height) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_area(height):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49."
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1."
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16."
      }
    ],
    "testCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": false
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": false
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": false
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_74",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_75",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(amount * n), Space complexity: O(amount) where n is the number of coin denominations",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction coinChange(coins, amount) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef coin_change(coins, amount):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins."
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins."
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": false
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": false
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": false
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      },
      {
        "input": "[1,2,5], 11",
        "expectedOutput": "3",
        "explanation": "5 + 5 + 1 = 11 uses 3 coins.",
        "isHidden": true
      },
      {
        "input": "[2], 3",
        "expectedOutput": "-1",
        "explanation": "It's impossible to make 3 using only 2-valued coins.",
        "isHidden": true
      },
      {
        "input": "[1], 0",
        "expectedOutput": "0",
        "explanation": "To make 0, we need 0 coins.",
        "isHidden": true
      }
    ],
    "tags": [
      "Dynamic Programming"
    ],
    "categories": [
      "Dynamic Programming"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_76",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction lengthOfLongestSubstring(s) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef length_of_longest_substring(s):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3."
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1."
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3."
      }
    ],
    "testCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": false
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_77",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_78",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_79",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_80",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>The array contains between 2 and 10^4 elements</li>\n  <li>Each element is between -10^9 and 10^9</li>\n  <li>There is exactly one solution</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "The array contains between 2 and 10^4 elements\nEach element is between -10^9 and 10^9\nThere is exactly one solution",
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(n)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n    // Your solution here\n    \n}\n\n// Do not modify the code below\nmodule.exports = twoSum;\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\n# Definition\ndef two_sum(nums, target):\n    # Your solution here\n    \n    \n# Do not modify the code below\nif __name__ == \"__main__\":\n    # Example test case\n    print(two_sum([2,7,11,15], 9))\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\nimport java.util.*;\n\nclass Solution {\n    // Do not modify the class name\n    public int[] twoSum(int[] nums, int target) {\n        // Your solution here\n        \n    }\n    \n    // Do not modify the main method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] result = solution.twoSum(new int[]{2,7,11,15}, 9);\n        System.out.println(Arrays.toString(result));\n    }\n}\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n#include <vector>\n#include <iostream>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        // Your solution here\n        \n    }\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    std::vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    std::vector<int> result = solution.twoSum(nums, target);\n    std::cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << std::endl;\n    return 0;\n}\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9"
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6"
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6"
      }
    ],
    "testCases": [
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": false
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6",
        "isHidden": false
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6",
        "isHidden": false
      },
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": true
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6",
        "isHidden": true
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6",
        "isHidden": true
      },
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": true
      },
      {
        "input": "[3,2,4], 6",
        "expectedOutput": "[1,2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6",
        "isHidden": true
      },
      {
        "input": "[3,3], 6",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6",
        "isHidden": true
      },
      {
        "input": "[2,7,11,15], 9",
        "expectedOutput": "[0,1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_81",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_82",
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n + m), Space complexity: O(1) where n and m are the lengths of the two lists",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists."
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list."
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": false
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": false
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": false
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      },
      {
        "input": "[], []",
        "expectedOutput": "[]",
        "explanation": "Merging two empty lists results in an empty list.",
        "isHidden": true
      },
      {
        "input": "[], [0]",
        "expectedOutput": "[0]",
        "explanation": "Merging an empty list with a non-empty list results in the non-empty list.",
        "isHidden": true
      },
      {
        "input": "[1,2,4], [1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merging the two sorted lists results in a single sorted list with all elements from both lists.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_83",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_84",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(n) where n is the number of nodes</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(n) where n is the number of nodes",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction levelOrder(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef level_order(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7]."
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "The level order traversal is: level 1: [3], level 2: [9,20], level 3: [15,7].",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "A tree with only the root node has a single level.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty tree has no levels.",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_85",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(min(m, n)) where n is the length of the string and m is the size of the character set",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction lengthOfLongestSubstring(s) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef length_of_longest_substring(s):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3."
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1."
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3."
      }
    ],
    "testCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": false
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": false
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3.",
        "isHidden": true
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1.",
        "isHidden": true
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3.",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_86",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction reverseList(head) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef reverse_list(head):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1."
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": false
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": false
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_87",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1) where n is the length of the strings</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1) where n is the length of the strings",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction isAnagram(s, t) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef is_anagram(s, t):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\"."
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters."
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\"."
      }
    ],
    "testCases": [
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": false
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": false
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": false
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      },
      {
        "input": "\"rat\", \"car\"",
        "expectedOutput": "false",
        "explanation": "The strings contain different characters.",
        "isHidden": true
      },
      {
        "input": "\"listen\", \"silent\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"listen\" gives \"silent\".",
        "isHidden": true
      },
      {
        "input": "\"anagram\", \"nagaram\"",
        "expectedOutput": "true",
        "explanation": "Rearranging \"anagram\" gives \"nagaram\".",
        "isHidden": true
      }
    ],
    "tags": [
      "Strings"
    ],
    "categories": [
      "Strings"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_88",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxArea(height) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_area(height):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49."
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1."
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16."
      }
    ],
    "testCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": false
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": false
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": false
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_89",
    "title": "Maximum Average Subarray I",
    "description": "You are given an integer array nums consisting of n elements, and an integer k. Find a contiguous subarray of length k that has the maximum average value and return this value.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75."
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0."
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0."
      }
    ],
    "testCases": [
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": false
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": false
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": false
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      },
      {
        "input": "[5], 1",
        "expectedOutput": "5.0",
        "explanation": "There is only one subarray of length 1, so its average is 5.0.",
        "isHidden": true
      },
      {
        "input": "[0,1,1,3,3], 4",
        "expectedOutput": "2.0",
        "explanation": "The subarray [1,1,3,3] has the maximum average (1+1+3+3)/4 = 8/4 = 2.0.",
        "isHidden": true
      },
      {
        "input": "[1,12,-5,-6,50,3], 4",
        "expectedOutput": "12.75",
        "explanation": "The subarray [12,-5,-6,50] has the maximum average (12-5-6+50)/4 = 51/4 = 12.75.",
        "isHidden": true
      }
    ],
    "tags": [
      "Sliding Window"
    ],
    "categories": [
      "Sliding Window"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_90",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_91",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_92",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxSubArray(nums) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_sub_array(nums):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum."
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "testCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": false
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": false
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      },
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "The single element is the subarray with the largest sum.",
        "isHidden": true
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_93",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(m*n), Space complexity: O(m*n) where m and n are the dimensions of the grid",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction numIslands(grid) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef num_islands(grid):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid."
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "testCases": [
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": false
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": false
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "expectedOutput": "1",
        "explanation": "There is only one island in the top left of the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
        "expectedOutput": "3",
        "explanation": "There are three islands in the grid.",
        "isHidden": true
      },
      {
        "input": "[[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "expectedOutput": "0",
        "explanation": "The grid contains only water, so there are no islands.",
        "isHidden": true
      }
    ],
    "tags": [
      "Graphs"
    ],
    "categories": [
      "Graphs"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_94",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "MEDIUM",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxArea(height) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_area(height):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49."
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1."
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16."
      }
    ],
    "testCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": false
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": false
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": false
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      },
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "The maximum area is formed by the lines at positions 1 and 8 with heights 8 and 7, giving area = min(8, 7) * (8 - 1) = 7 * 7 = 49.",
        "isHidden": true
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "The only container possible has area = min(1, 1) * (2 - 1) = 1 * 1 = 1.",
        "isHidden": true
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "The maximum area is formed by the lines at positions 0 and 4 with heights 4 and 4, giving area = min(4, 4) * (4 - 0) = 4 * 4 = 16.",
        "isHidden": true
      }
    ],
    "tags": [
      "Arrays"
    ],
    "categories": [
      "Arrays"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_95",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_96",
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxDepth(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_depth(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7)."
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2)."
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": false
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_97",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction reverseList(head) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef reverse_list(head):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1."
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1."
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "testCases": [
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": false
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": false
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      },
      {
        "input": "[1,2]",
        "expectedOutput": "[2,1]",
        "explanation": "After reversing, the linked list becomes 2->1.",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "An empty list remains empty after reversal.",
        "isHidden": true
      },
      {
        "input": "[1,2,3,4,5]",
        "expectedOutput": "[5,4,3,2,1]",
        "explanation": "After reversing, the linked list becomes 5->4->3->2->1.",
        "isHidden": true
      }
    ],
    "tags": [
      "Linked Lists"
    ],
    "categories": [
      "Linked Lists"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_98",
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward."
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome."
      }
    ],
    "testCases": [
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": false
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": false
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": false
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      },
      {
        "input": "\"race a car\"",
        "expectedOutput": "false",
        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome.",
        "isHidden": true
      },
      {
        "input": "\" \"",
        "expectedOutput": "true",
        "explanation": "After processing, the string becomes \"\", which is a palindrome.",
        "isHidden": true
      },
      {
        "input": "\"A man, a plan, a canal: Panama\"",
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase, the string becomes \"amanaplanacanalpanama\", which reads the same forward and backward.",
        "isHidden": true
      }
    ],
    "tags": [
      "Two Pointers"
    ],
    "categories": [
      "Two Pointers"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_99",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(1)",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * @param {array} params - The input parameters based on the problem\n * @return {any} - The correct output based on the problem requirements\n */\n// END LOCKED\nfunction solution(params) {\n    // Your solution code here\n    \n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Parameters will be specific to the problem\n# Return the correct output based on the problem requirements\n# END LOCKED\ndef solution(params):\n    # Your solution code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED",
      "java": "// BEGIN LOCKED\nimport java.util.*;\n\nclass Solution {\n// END LOCKED\n    public int solve(int[] nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n    \n    // Do not modify the code below\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test code will be added here automatically\n    }\n}\n// END LOCKED",
      "cpp": "// BEGIN LOCKED\n#include <vector>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n// END LOCKED\n    int solve(std::vector<int>& nums) {\n        // Your solution code here\n        return 0;\n    }\n// BEGIN LOCKED\n};\n\n// Do not modify the code below\nint main() {\n    Solution solution;\n    // Test code will be added here automatically\n    return 0;\n}\n// END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice."
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice."
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once."
      }
    ],
    "testCases": [
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": false
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": false
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      },
      {
        "input": "[4,1,2,1,2]",
        "expectedOutput": "4",
        "explanation": "The element 4 appears only once, while 1 and 2 appear twice.",
        "isHidden": true
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "There is only one element, which appears once.",
        "isHidden": true
      },
      {
        "input": "[2,2,1]",
        "expectedOutput": "1",
        "explanation": "The element 1 appears only once, while 2 appears twice.",
        "isHidden": true
      }
    ],
    "tags": [
      "Bit Manipulation"
    ],
    "categories": [
      "Bit Manipulation"
    ],
    "isFeatured": false,
    "isPublic": true,
    "creatorId": "system"
  },
  {
    "id": "prob_100",
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n<p><strong>Constraints:</strong></p>\n<ul>\n  <li>Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree</li>\n</ul>",
    "difficulty": "EASY",
    "constraints": "Time complexity: O(n), Space complexity: O(h) where n is the number of nodes and h is the height of the tree",
    "templateCode": {
      "javascript": "// BEGIN LOCKED\n/**\n * Function signature and parameters depend on the problem\n */\n// END LOCKED\nfunction maxDepth(root) {\n    // Your code here\n}\n\n// BEGIN LOCKED\n// Do not modify the code below\nmodule.exports = solution;\n// END LOCKED",
      "python": "# BEGIN LOCKED\n# Function signature and parameters depend on the problem\n# END LOCKED\ndef max_depth(root):\n    # Your code here\n    pass\n\n# BEGIN LOCKED\n# Do not modify the code below\nif __name__ == \"__main__\":\n    import sys\n    import json\n    print(solution(*json.loads(sys.argv[1])))\n# END LOCKED"
    },
    "exampleTestCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7)."
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2)."
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0."
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": false
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": false
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      },
      {
        "input": "[1,null,2]",
        "expectedOutput": "2",
        "explanation": "The maximum depth is 2: from root (1) to the leaf node (2).",
        "isHidden": true
      },
      {
        "input": "[]",
        "expectedOutput": "0",
        "explanation": "An empty tree has a depth of 0.",
        "isHidden": true
      },
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "3",
        "explanation": "The maximum depth is 3: from root (3) to the leaf nodes (15 or 7).",
        "isHidden": true
      }
    ],
    "tags": [
      "Trees"
    ],
    "categories": [
      "Trees"
    ],
    "isFeatured": true,
    "isPublic": true,
    "creatorId": "system"
  }
]